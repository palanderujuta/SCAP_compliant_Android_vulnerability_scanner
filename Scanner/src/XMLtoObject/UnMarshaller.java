package XMLtoObject;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;

import criterion.Criterion;
import definition.Criteria;
import definition.Definition;
import oval_def.OVAL_definitions;
import oval_def.States;
import state.systemdetails_state;
import state.telephony_state;
import test.GenericTest;
import test.State;

public class UnMarshaller {
	static OVAL_definitions ovaldefinitions;
	static String android_oval_definition = "C:/Users/RUJUTA/Desktop/RujutaGIT/internship/SCAP_compliant_Android_vulnerability_scanner/OVAL_definition_android.xml";
	
	
	public static boolean criteriaEvaluate(Definition def,String OS,String network)  //evaluating the boolean value of a criteria
	{
	    boolean loopBoolean1=false;
	    boolean loopBoolean2=false;
		List<Criterion> criterionList=new ArrayList<Criterion>();
		String operator=new String();
		
		operator=def.getCriteria().getOperator();
		criterionList=new ArrayList<Criterion>();
		criterionList=def.getCriteria().getCriterion();
		
		for(int i=0;i<criterionList.size();i++)
		{
			if(operator.equals("AND"))
			{
				if(crietrionEvaluate(criterionList.get(i),OS,network)==false)
				{
					loopBoolean1= false;
					break;
				}
				else
					loopBoolean1=true;
				
			} 
			else if(operator.equals("OR"))
			{
				if(crietrionEvaluate(criterionList.get(i),OS,network)==true)
				{
					loopBoolean1 =true;
					break;
				}
				else
					loopBoolean1=false;
			
			}
			
		}
		//System.out.println("\n loopboolean1 value : "+loopBoolean1);
		Criteria criteria=def.getCriteria(); //root criteria
		List<Criteria> criteriaList=criteria.getCriteria(); //sublist of criteria
		
		if(criteriaList.size()!=0)
		{
			for(int i=0;i<criteriaList.size();i++)
			{
				criterionList=criteriaList.get(i).getCriterion();
				String operatorC=criteriaList.get(i).getOperator();
				for(int j=0;j<criterionList.size();j++)
				{
					if(operatorC.equals("AND"))
					{
						if(crietrionEvaluate(criterionList.get(j),OS,network)==false)
						{
							loopBoolean2= false;
							break;
						}
						else
							loopBoolean2=true;
						
					} 
					else if(operatorC.equals("OR"))
					{
						if(crietrionEvaluate(criterionList.get(j),OS,network)==true)
						{
							loopBoolean2 =true;
							break;
						}
						else
							loopBoolean2=false;
					
					}
				}
				//System.out.println("\nLoopBoolean2 : "+loopBoolean2);
			}
		}
		
		
		if(operator.equals("AND"))
			return loopBoolean1&&loopBoolean2;
		else
			return loopBoolean1||loopBoolean2;
	}
	
	
	public static boolean crietrionEvaluate(Criterion criterion,String OS,String network)
	{	
			String testRef=criterion.getTestRef();
			//System.out.println("testRef: "+testRef);
			if(testEvaluate(testRef,OS,network))
				return true;
		
		return false;
	}
	
	public static boolean testEvaluate(String testRef,String OS,String network)
	{
		List<GenericTest> genericTest=ovaldefinitions.getTests().getTelephonyTests();
		
		for(int i=0;i<genericTest.size();i++)
		{
			//System.out.println("\nTest ID: "+genericTest.get(i).getId());
			GenericTest test=genericTest.get(i);
			if(test.getId().equals(testRef))
			{
				//System.out.println("\nTest found : "+test.getComment());
				String stateRef=test.getState().getStateRef();
				if(stateEvaluate(stateRef,0,OS,network))
					return true;//0 for telephony and 1 for system_details
				
			}
				//break;
		}
		
		genericTest=ovaldefinitions.getTests().getsysdetailsTests();
		for(int i=0;i<genericTest.size();i++)
		{
			GenericTest test=genericTest.get(i);
			if(test.getId().equals(testRef))
			{
				//System.out.println("\nTest found : "+test.getComment());
				String stateRef=test.getState().getStateRef();
				if(stateEvaluate(stateRef,1,OS,network))
					return true;//0 for telephony and 1 for system_details
				
			}
		}
		return false;
	}
	
	
	public static boolean stateEvaluate(String stateRef,int num,String OS,String network)
	{
		States states=ovaldefinitions.getStates();
		if(num==0)
		{
			List<telephony_state> tel_state=states.gettelephonyState();
			for(int i=0;i<tel_state.size();i++)
			{
				telephony_state tel=tel_state.get(i);
				if(tel.getId().equals(stateRef))
				{
					if(!network.equals(null))
						return true;
				}
			}
		}
		else
		{
			List<systemdetails_state> sys_state=states.getsystemdetails_state();
			for(int i=0;i<sys_state.size();i++)
			{
				if(sys_state.get(i).getId().equals(stateRef))
				{
					if(sys_state.get(i).getOs_version_code().get(0).getOs_version_codename().equals(OS))
					{
						return true;
					}
					else
					{
						return false;
					}
				}
				
				
				
			}
		}
		return false;
	}
	
	
	public static String checkVulnerability(String OS,String network)
	{
		File file = new File(android_oval_definition);
		JAXBContext jaxbContext;
		String vul=new String();
		try 
		{
			jaxbContext = JAXBContext.newInstance(OVAL_definitions.class);
			javax.xml.bind.Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
			ovaldefinitions = (OVAL_definitions)  jaxbUnmarshaller.unmarshal(file);
			//System.out.println(ovaldefinitions);
			List<Definition> defList=ovaldefinitions.getDefinitions().getDefinitions();
			for(int i=0;i<defList.size();i++)
			{
				Definition def=defList.get(i);
				String vulnerability=def.getMetadata().getReferences().get(0).getRefID();
				//System.out.println(vulnerability);
				if(criteriaEvaluate(def,OS,network))
				{
					System.out.println(vulnerability+" vulnerability exists");
					vul=vul+ " "+vulnerability;
				}
				else
					System.out.println(vulnerability+" does not exist");
			}	
			
		} 
		catch (JAXBException e) 
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return vul;

	}
}
